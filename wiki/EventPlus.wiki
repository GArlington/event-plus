= Stock Quote Analyzer =

Lets win half the battle by running through the use case below. Below example analyzes quotes from two stock exchanges and merges the quotes to figure out best bid and ask and computes PNL in realtime.
Below code is in lined from [http://event-plus.googlecode.com/svn/trunk/examples/StockQuoteAnalyzer/src/schema/StockQuoteAnalyzer.java StockQuoteAnalyzer].
So we begin by coding few interfaces as simple as below. 

{{{
package schema;

import processor.Quote;

import com.biswa.ep.annotations.EPAttrType;
import com.biswa.ep.annotations.EPAttribute;
import com.biswa.ep.annotations.EPConType;
import com.biswa.ep.annotations.EPContainer;
import com.biswa.ep.annotations.EPContext;
import com.biswa.ep.annotations.EPPublish;

@EPContext()
public interface StockQuoteAnalyzer {
	@EPContainer(type = EPConType.Subscription)
	public interface NYSE {
		@EPAttribute(type = EPAttrType.SubProcessor, processor = "processor.NYSEMarketData")
		Quote marketData = null; 
	}

	@EPContainer(type = EPConType.Subscription)
	public interface NASDAQ {
		@EPAttribute(type = EPAttrType.SubProcessor, processor = "processor.NASDAQMarketData")
		Quote marketData = null;
	}

	@EPContainer(generator = "generator.Portfolio")
	interface InputStocks {
		String symbol = null;
		Double quantity = null;
		Double tranPrice = null;
	}

	@EPContainer(publish=EPPublish.RMI)
	public interface Portfolio extends InputStocks {
		@EPAttribute(type = EPAttrType.Subscriber, depends = "symbol", container = "NYSE")
		public Quote nysePrice = null;
		
		@EPAttribute(type = EPAttrType.Subscriber, depends = "symbol", container = "NASDAQ")
		public Quote nasdaqPrice = null;
		
		public Double bestBid=nysePrice.bid>nasdaqPrice.bid?nysePrice.bid:nasdaqPrice.bid;
		public Double bestAsk=nysePrice.ask<nasdaqPrice.ask?nysePrice.ask:nasdaqPrice.ask;
		
		public Double stockWorth = quantity>0.0?quantity*bestBid:quantity*bestAsk;
		
		public Double PNL = stockWorth-quantity*tranPrice; 
	}
}

}}}

You must have noticed special annotations @EPContext and @EPContainer around the interfaces right? Yes that's where the magic begins. As we compile this interface just like as if any other standard java program Java compiler will generate special code wiring all the dependencies and deployment descriptors required to forward propagate the dependencies.