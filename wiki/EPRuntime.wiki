==`EventPlus` Runtime==
*`EventPlus`* runtime deploys the code generated by the EPCompiler. `EventPlus` uses RMI for intercommunication among processes however can be extended to other communication protocols like JMS/HTTP.


===RMI Registry===
Runtime uses standard RMI registry for its interaction among components. Remember core component of the `EventPlus` does not know anything about underlying protocol. You are *NOT* required to run RMI registry explicitly. However if you like to use your existing one then can specify the jvm argument 
`-Dep.registryPort=<yourhost>`
`-Dep.registryPort=<yourport>`
accordingly in your application to use.

===Discovery Manager===
This process hosts all foundation services also acts as the manager of all processing members in your application. All members register their service to this and this coordinates among. Handles member exit and entry into the system. Unless RMI registry is already running this instance starts embedded registry as specified by the `-Dep.registryPort=<yourport>` other wise default RMI port(1099) is used. If port 1099 is used by anything other than RMI registry then you must specify the default. This process must be running on the same host as RMI registry. Once again this is not a mandatory process depending on your deployment. If you are running a standalone application instance not requiring to deploy across processes you do not need to start this explicitly.

===Application Member===
All your business logic runs here. Application will try to connect to discovery manager as specified by 
`-Dep.registryPort=<yourhost>`
`-Dep.registryPort=<yourport>` in absence of these arguments will try the default RMI port on the hardware its running. In case it does not discover the manager it starts the in-process manager and all other communication remains intact.

{{{
        @EPContainer(publish=EPPublish.RMI)
        public interface Portfolio extends InputStocks {
                @EPAttribute(type = EPAttrType.Subscriber, depends = "symbol", container = "NYSE")
                public Quote nysePrice = null;
                
                @EPAttribute(type = EPAttrType.Subscriber, depends = "symbol", container = "NASDAQ")
                public Quote nasdaqPrice = null;
                
                public Double bestBid=nysePrice.bid>nasdaqPrice.bid?nysePrice.bid:nasdaqPrice.bid;
                public Double bestAsk=nysePrice.ask<nasdaqPrice.ask?nysePrice.ask:nasdaqPrice.ask;
                
                public Double stockWorth = quantity>0.0?quantity*bestBid:quantity*bestAsk;
                
                public Double PNL = stockWorth-quantity*tranPrice; 
        }

}}}

{{{
        <Container type='Basic' name='Portfolio'>
                <Publish method='RMI' />
                <Listen container='InputStocks' context='StockQuoteAnalyzer' method='LOCAL' />
                <Attribute className='epimpl.schema.StockQuoteAnalyzer$Portfolio$nysePrice' />
                <Listen container='NYSE' context='StockQuoteAnalyzer' method='LOCAL' />
                <Feedback container='NYSE' context='StockQuoteAnalyzer' method='LOCAL' />
                <Subscribe container='NYSE' context='StockQuoteAnalyzer' method='LOCAL' depends='symbol' response='nysePrice' />
                <Attribute className='epimpl.schema.StockQuoteAnalyzer$Portfolio$nasdaqPrice' />
                <Listen container='NASDAQ' context='StockQuoteAnalyzer' method='LOCAL' />
                <Feedback container='NASDAQ' context='StockQuoteAnalyzer' method='LOCAL' />
                <Subscribe container='NASDAQ' context='StockQuoteAnalyzer' method='LOCAL' depends='symbol' response='nasdaqPrice' />
                <Attribute className='epimpl.schema.StockQuoteAnalyzer$Portfolio$bestBid' />
                <Attribute className='epimpl.schema.StockQuoteAnalyzer$Portfolio$bestAsk' />
                <Attribute className='epimpl.schema.StockQuoteAnalyzer$Portfolio$stockWorth' />
                <Attribute className='epimpl.schema.StockQuoteAnalyzer$Portfolio$PNL' />
        </Container>

}}}
